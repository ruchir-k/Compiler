** Test case : Q2 All parts
ONLINE question 2 (a)(b),(c), (d) and (e): 
For (a): ERRORs at lines 64, 66 and 83
For (b): Count is 5 at line 151 (correct the test case if any end mismatches with the start syntactically)
For (c): Not an error now at lines 73, 250, 283,332 but an error at line 341
For (d): ERRORs at line 125, 183 and 185
For (e): Not an error at lines 47 and 70, but an error at line 127.

(correct the test case if any syntax error exists)




--------------------------------------------
Original Test case 8: Testing function overloading and recursion 
This Includes 
1. A function with the same name cannot appear more than once (overloading check)
2. A function cannot call itself (recursion check)
3. precedence of function definitions before their use
4. Assignment of output parameters 
5. Number and types of input and output parameters (extension of test case 6)
6. static bound checking and static type checking in expressions - arithmetic and boolean (extension of test case 5) **

** Multiple level nesting using integer, real, boolean data types including static array data type**
**Variant of test case 7**

declare module function1;
declare module function2;
declare module function4;

<<module var_demo_array>>
takes input [x:integer, m:array [2..20] of integer, p:real];
returns [ n:integer, k: boolean];
start
	declare a,b,h:integer;	
	get_value(b);
	declare b4: array[100..150] of boolean;
	declare p: array[2..20] of integer;	
	a:= m[5]+3;				   **Not an error: array index within bounds**
	use module function2 with parameters a,b;  **NEW ERROR: number of input parameters mismatch, but error not due to module def as module function2 is declared before this call**
	p:= m;					   **Not an error: type expressions of array variables p and m are same and assignment is a valid operation**
	k:=true;	
	p:= m + p;                                 **ERROR: array variables m and p cannot be added**
	declare v1, v2:real;	
	p[10]:= a*b-20*h;                          **Not an error: array index within bounds**
	declare b7: array[35..50] of real;			 
	while(k AND x<=m[11] OR false AND w9pqrstuvwxyz679877887)	**ONLINE: IMPLICITID used here - no type error**
	start
		declare p, u:integer;
		declare b: array[2..20] of integer;
		declare W1: boolean;
		declare b5, b6: array[35..50] of real;
		b:= m;
		[v1, u, k, p]:=use module function1 with parameters b4, v2, p, b5, u;	**not an error**			
		b[2]:= u+m[25];			   **ERROR: element of array m is out of bound** 
		p:= b[18]*18.56E+2;		   **ERROR: type mismatch **
		[p, W1]:=use module var_demo_array with parameters u, b, v1;       **ONLINE: not an error as first recursive call is exempted**
		declare v3:integer;
		[v1, u, k, v3]:=use module function1 with parameters b4, v2, p, v3, u;	**ERROR: input parameter type mismatch **	
		p := p+1;
		[p, W1]:=use module var_demo_array with parameters u, b, v1;       **ONLINE: not an error as second recursive call is exempted**	
		u:=u+p;
		p:=p-b[10];
		[p, W1]:=use module var_demo_array with parameters p, b, v1;       **ONLINE: ERROR as third recursive call is not exempted**
		b5[40]:=b6[49]+ 18.56E+2;
		[p, W1]:=use module var_demo_array with parameters p, b, v1;       **ONLINE: ERROR as fourth recursive call is not exempted**
	end
        a:= a - p*b;				   	**ERROR: types of p and b are different**
	b:= b+3;
	k:= a>b OR b>100 AND w9pqrstyz6887;		**ONLINE: IMPLICITID used here - no type error**
	[v1, a, k, h]:=use module function1 with parameters b7, v2, p, b7, b;	**ERROR: input parameter type mismatch **			
	print(k);	
end						 ** ONLINE: not an error is the output parameter n is not assigned any value-first exemption**

<<module function2>>
takes input [ x:integer, y:integer, M3: boolean];
start
	declare temp: integer;
	use module function2 with parameters x,y, M3;       **ONLINE: not an error as first recursive call is exempted**
	temp:= x+y;
	use module function2 with parameters x,y, M3;       **ONLINE: not an error as second recursive call is exempted**
	temp:= 23;
	use module function2 with parameters x,y, M3;       **ONLINE: ERROR as third recursive call is not exempted**
end

<<module eval_two>>
takes input [x:integer, N1: real, m:array [2..20] of integer, p:real, N2: array[-10..4]of boolean];
returns [ n:integer, k: boolean, N3: real];
start
	declare a,b:integer;	
	get_value(b);
	declare p, N4: array[2..20] of integer;	**Not an error as local variable can shadow the definition of input parameter**
	a:= m[5]+3;
	declare N5: array[-160..+156] of real;
	p:= m;					** not an error**
	k:=true;
	N4:=N5; 				**NEW ERROR : array variables are not structurally similar, type mismatch**
	p[10]:= a*b-20*h;			**ERROR: variable h is not declared**
	while(k AND N4[3]<=m[11] OR false) **ONLINE: while loop nesting depth is 1 here**
	start
		declare p:integer;
		declare b: array[2..20] of integer;
		declare N6: array[-107..209] of real; 
		declare N7, u: real;
		N6:=N5;			**NEW: not an error as both are structurally equivalent arrays**
		N4[15]:=m[12];
		for(P1 in 10..20)	**ONLINE: for loop nesting depth is 2 here**
		start
			declare x, y, z:integer;
			declare b: boolean;
			declare loop_var:integer;
			y:= 19 + q8z776;                **ONLINE: ERROR as IMPLICITID of boolean type used here**;
			z:= 56;
			for(loop_var in 3..6)	**ONLINE: for loop nesting depth is 3 here**
			start
				get_value(x);
				switch(x)
				start
					case 1: y:= x*2-y+loop_var;
						print(y);
				        	break;
					case 2: z:= x*3-z+loop_var;
						print(z);
				        	break;
					case 2: z:= x*3-z+loop_var;	**ONLINE: ERROR as two case statements are with same value 2**
						print(z);
				        	break;
					default:print(x);
						break;
				end
				print(y);
				for(P2 in 30..40)	**ONLINE: for loop nesting depth is 4 here and count is 1**
				start
					declare P3, P4: integer;
					P3:= P4 +25;
					for(P5 in 100..200)	**ONLINE: for loop nesting depth is 5 here and count is 2**
					start
						declare P6:integer;
						P6:=38;
					end		
					P3:=P4+22;
					for(P7 in 100..200)	**ONLINE: for loop nesting depth is 5 here and count is 3**
					start
						declare P6:integer;
						P6:=38+P7;
					end	
						
				end
				print(z);
				for(P8 in 12..25)	**ONLINE: for loop nesting depth is 4 here and count is 4**
					for(P7 in 100..200)	**ONLINE: for loop nesting depth is 5 here and count is 5**
					start
						declare P6:integer;
						P6:=38+P7+P8;
					end
				end		
			end
		end
		b:= m;				**not an error**
		N6:=N5 + N6;                   **NEW ERROR: type mismatch as  + does not support array addition**
		b[2]:= p+m[6];			**not an error**
		N4[15]:=N5[1] + p;		**NEW ERROR: type mismatch**
		p:= b[18]*18;
	end					**Not an error: one of the conditional vars N4 defined in scope of while**
        n:= a - b;
	declare M5:real;				
	N5[-160]:=N5[200]+23.67e+3;		**NEW ERROR: N5[200] out of bound**
	b:= b+3;
	k:= a>b OR b>100;
	print(k);
	switch(M5)				**NEW ERROR: type mismatch**
	start
		case 10: declare A:real;
			 declare Q: integer;
			 declare B: array[10..30] of integer;
			 declare E: array[4..10] of integer;
			 B[12]:= k*20; 	                  	
			 break;
		case 12: m:=m-n;			
			 break;
		case 11: m:=m-n;			
			 break;
		case 12: m:=m-n;		**ONLINE: ERROR as two case statements are with same value 12**			
			 break;
		case 10: m:=m-n;		**ONLINE: ERROR as two case statements are with same value 10**		
			 break;
		default: m:=n*2;	       
			 break;			 	
	end
	b:= b+3;
	k:= a>b OR b>100;
	declare M6: boolean;
	switch(M6)				
	start
		case true: declare A:real;
			 declare Q: integer;
			 declare B: array[10..30] of integer;
			 declare E: array[4..10] of integer;
			 B[12]:= k*20; 	                  	
			 break;
		case false: m:=m-n;			
			 break;
		default: n:=n*2;	     **NEW ERROR: Presence of default statement is erroneous**   
			 break;			 	
	end	
end
<<module f1>>
takes input[a: array[10..30] of integer, b:array[10..30] of integer, c:real];
returns [m:boolean, n:integer];
start
	declare x,y, p: real;
	declare k, y1: integer;
	declare E: array[2..20] of integer;
	declare Var3, Var4: array[100..150] of boolean;
	get_value(y);
	get_value(x);
	declare A,B: array[4..10] of integer;
	declare Var1, Var2: array[35..50] of real;
	get_value(B);
	use module function2 with parameters k, y1, Var4[102];  **Do not report this as an error because of redundant declaration of function2. This declaration has been genuinely needed in function var_demo_array**
	declare D,C: array[10..30] of integer;
	A:=B;
	[ y1, m]:=use module var_demo_array with parameters k,E,x;	 **not an error**					 
	C:=a;
	[x, y1, m, k]:=use module function1 with parameters Var3, c, k, Var2, k;	**no error**			
	D:=C;	

 
	[ k, m]:=use module var_demo_array with parameters k,B,p;       **ERROR: Input parameter type of B does not match with formal parameter type**						 
	for (k in 15..40)
	start
		x:=x+k*y;				    **ERROR: Type mismatch error**
		declare u, v:real;
		declare M1: boolean;
		declare int1: integer;
		declare M2: array[-10..4]of boolean;
		[int1, M1, v]:= use module eval_two with parameters int1, Var2[40], E, u, M2;              **NEW: not an error**
		u := y+c*34.2;
		v:= u-c*p-20.5E+2;
		[x, int1, m, k]:=use module function1 with parameters Var3, c, k, Var4, int1; **ERROR: Input parameter type of Var4 does not match with formal parameter type, also loop variable k is assigned a value**		
		x:=x + u*v- u<=v;                             **ERROR: Type mismatch error**
	end
	x:=c+y;	
	[p]:= use module function3 with parameters x,y;       **ERROR: module function3 is not defined**
	C[18]:= a[18]+ b[18];
	
	A[5]:= B[6]- 10;
	m:= A[5]< C[18] + A[11];			      **ERROR: element of array A is out of bound** 
	y1:= 20*8-5;	
end							     ** ONLINE: not an error as the output parameters n is not assigned any value-firs exemption**



<<module function3>>
takes input [a: real, b:real];
returns [c:real];
start
	c:= a+b;
end

<<module function4>>			    **ERROR: function4 definition and its declaration both appear before its call**
takes input [a: boolean, b:boolean];
returns [c:boolean];
start
	c:= a AND b;
end

<<module function3>>			    **ERROR: function3 cannot be overloaded**
takes input [a: real, b:boolean, e:integer];
returns [c:boolean, d: integer];
start
	d:= 5*43+e;
	c:= a<15.50 AND b;	
end

<<module ONLINEnew>>			    **ERROR: function3 cannot be overloaded**
takes input [a: real, b:boolean, e:integer];
returns [c:boolean, P9: integer, P10: real, P11: boolean, d: integer];
start
	d:= 5*43+e;
	c:= a<15.50 AND b;
	P9:=10;	
end 				** ONLINE: not an error as the output parameters P10 and P11 are not assigned any value-first and second exemptions**

<<<driver program>>>
start
	declare v_1_2_3, A:integer;
	declare u1, u2, k:boolean;
        A:=12;
	declare p: real;
	[k]:= use module function4 with parameters u1, u2;     
	p:= 23.56;
	get_value(v_1_2_3);							 		
	declare B, C: array [2..20] of integer;
	[ v_1_2_3, u1]:=use module var_demo_array with parameters A,B,p;		
	[ v_1_2_3, k]:=use module var_demo_array with parameters A,B,p;	
	declare a,b:integer;
	a:= 5.89e-2;			        **ERROR: type mismatch error**
	get_value(b);
	declare value, q, r: real;
	get_value(q);
	r:= 23.67e+2;
	value:= p+q*r-a*value; 			**ERROR: type mismatch error**
	k:= true AND false OR q;		**ERROR: type mismatch error**
	u1:= a<=b;
	declare w: integer;			 
	w:= 23+B[6];                                  
	b:= a*25+100*C[1];		        **ERROR:element of array C is out of bound** 
	declare D: array[20..40] of integer;			 
	D:= value-q+r;				**ERROR: type mismatch error**
	w:= w + 5;		 
	B:= C;
	C:= D;				        **ERROR: type mismatch error**        
end

<<module function1>>
takes input [data: array[100..150] of boolean, weight: real, length: integer, b:array[35..50] of real, q:integer];
returns [R1: real, R2: integer, R3: boolean, R4: integer];
start
	declare e,f: integer;
	declare g,h: array[100..150] of boolean;
	get_value(g);
	h:=data;
	h[120]:= g[120] OR length<=q AND h[140];
	declare a: real;
	declare p1: boolean;
	R2:= q+1;
	get_value(a);
	[R1, e, p1, f]:=use module function1 with parameters g, a, e, b, f;	**ERROR: function cannot call itself **			
	R1:= a+weight/20.50;
	R4:=f + 100;
end								** ONLINE: not an error as the output parameter R3 not assigned any value-first exemption**

<<module ONLINEnew2>>			    **ERROR: function3 cannot be overloaded**
takes input [a: real, b:boolean, e:integer];
returns [c:boolean, P9: integer, P10: real, P11: boolean, d: integer, P12: integer];
start
	d:= 5*43+e;
	c:= a<15.50 AND b;
	P9:=10;	
end 				** ONLINE: not an error as the output parameters P10 and P11 are not assigned any value-first and second exemptions, but an error due to the third unassigned output parameter P12**

<<module function1>>			    **ERROR: function1 cannot be overloaded**
takes input [b:boolean, e:integer];
returns [c:boolean, d: integer];
start
	declare m, n : integer;
	d:= e+15;
	c:= true AND b;
	while(m<=n AND d<e)
	start
	    	c:=5+7;
	end
end

<<module functionnew1>>			    
takes input [b:boolean, e:integer];
returns [c:boolean, d: integer];
start
	declare m, n : integer;
	d:= e+15;
	c:= true AND b;
	while(m<=n AND d<e)
	start
	    	c:=5+7;
	end		**ERROR: no conditional variable is assigned any value**
end
